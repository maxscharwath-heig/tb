@misc{amazon.comRiakDynamoAmazon2007,
  title = {Riak: {{Dynamo}}: {{Amazon}}'s {{Highly Available Key-value Store}}},
  author = {{Amazon.com}},
  year = {2007},
  howpublished = {https://docs.riak.com/riak/kv/2.2.3/learn/dynamo/index.html}
}

@misc{AutomergeCRDTAutomerge,
  title = {Automerge {{CRDT}} | {{Automerge CRDT}}},
  urldate = {2023-04-25},
  abstract = {Automerge is a library of data structures for building collaborative applications.},
  howpublished = {https://automerge.github.io/},
  langid = {english},
  file = {/Users/maxsch/Zotero/storage/HMETCTJV/automerge.org.html}
}

@misc{BinaryDocumentFormat,
  title = {Binary {{Document Format}}},
  urldate = {2023-07-21},
  howpublished = {https://automerge.org/automerge-binary-format-spec/},
  file = {/Users/maxsch/Zotero/storage/3J7K6HF2/automerge-binary-format-spec.html}
}

@article{ConflictfreeReplicatedData2023,
  title = {Conflict-Free Replicated Data Type},
  year = {2023},
  month = jul,
  journal = {Wikipedia},
  urldate = {2023-07-21},
  abstract = {In distributed computing, a conflict-free replicated data type (CRDT) is a data structure that is replicated across multiple computers in a network, with the following features: The application can update any replica independently, concurrently and without coordinating with other replicas. An algorithm (itself part of the data type) automatically resolves any inconsistencies that might occur. Although replicas may have different state at any particular point in time, they are guaranteed to eventually converge.The CRDT concept was formally defined in 2011 by Marc Shapiro, Nuno Pregui\c{c}a, Carlos Baquero and Marek Zawirski.  Development was initially motivated by collaborative text editing and mobile computing. CRDTs have also been used in online chat systems, online gambling, and in the SoundCloud audio distribution platform. The NoSQL distributed databases Redis, Riak and Cosmos DB have CRDT data types.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1166243640}
}

@article{ConflictfreeReplicatedData2023a,
  title = {Conflict-Free Replicated Data Type},
  year = {2023},
  month = jul,
  journal = {Wikipedia},
  urldate = {2023-07-21},
  abstract = {In distributed computing, a conflict-free replicated data type (CRDT) is a data structure that is replicated across multiple computers in a network, with the following features: The application can update any replica independently, concurrently and without coordinating with other replicas. An algorithm (itself part of the data type) automatically resolves any inconsistencies that might occur. Although replicas may have different state at any particular point in time, they are guaranteed to eventually converge.The CRDT concept was formally defined in 2011 by Marc Shapiro, Nuno Pregui\c{c}a, Carlos Baquero and Marek Zawirski.  Development was initially motivated by collaborative text editing and mobile computing. CRDTs have also been used in online chat systems, online gambling, and in the SoundCloud audio distribution platform. The NoSQL distributed databases Redis, Riak and Cosmos DB have CRDT data types.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1166243640}
}

@inproceedings{ellisConcurrencyControlGroupware1989,
  title = {Concurrency {{Control}} in {{Groupware Systems}}},
  booktitle = {Proceedings of the 1989 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  author = {Ellis, C. A. and Gibbs, S. J.},
  year = {1989},
  series = {{{SIGMOD}} '89},
  pages = {399--407},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/67544.66963},
  abstract = {Groupware systems are computer-based systems that support two or more users engaged in a common task, and that provide an interface to a shared environment. These systems frequently require fine-granularity sharing of data and fast response times. This paper distinguishes real-time groupware systems from other multi-user systems and discusses their concurrency control requirements. An algorithm for concurrency control in real-time groupware systems is then presented. The advantages of this algorithm are its simplicity of use and its responsiveness: users can operate directly on the data without obtaining locks. The algorithm must know some semantics of the operations. However the algorithm's overall structure is independent of the semantic information, allowing the algorithm to be adapted to many situations. An example application of the algorithm to group text editing is given, along with a sketch of its proof of correctness in this particular case. We note that the behavior desired in many of these systems is non-serializable.},
  isbn = {0-89791-317-5}
}

@misc{ExcalidrawExcalidraw2023,
  title = {Excalidraw/Excalidraw},
  year = {2023},
  month = jul,
  urldate = {2023-07-21},
  abstract = {Virtual whiteboard for sketching hand-drawn like diagrams},
  copyright = {MIT},
  howpublished = {Excalidraw},
  keywords = {canvas,collaboration,diagrams,drawing,productivity,whiteboard}
}

@misc{foundationApacheWave2012,
  title = {Apache {{Wave}}},
  author = {Foundation, The Apache Software},
  year = {2012},
  howpublished = {https://incubator.apache.org/wave/}
}

@misc{hardenbergAutomerge2023,
  title = {Automerge 2.0},
  author = {van Hardenberg, Peter},
  year = {2023},
  howpublished = {https://automerge.org/blog/automerge-2}
}

@misc{holzleUpdateGoogleWave2010,
  title = {Update on {{Google Wave}}},
  author = {H{\"o}lzle, Urs},
  year = {2010},
  howpublished = {https://googleblog.blogspot.com/2010/08/update-on-google-wave.html}
}

@misc{incImmuDB2023,
  title = {{{ImmuDB}}},
  author = {Inc, Codenotary},
  year = {2023},
  howpublished = {https://immudb.io/}
}

@misc{incIntroducingGoogleWave2009,
  title = {Introducing {{Google Wave}}},
  author = {Inc, Google},
  year = {2009},
  howpublished = {https://www.youtube.com/watch?v=v\_UyVmITiYQ},
  annotation = {Published: Google I/O Developer Conference}
}

@misc{InstallationTailwindCSS,
  title = {Installation - {{Tailwind CSS}}},
  urldate = {2023-04-28},
  abstract = {The simplest and fastest way to get up and running with Tailwind CSS from scratch is with the Tailwind CLI tool.},
  howpublished = {https://tailwindcss.com/docs/installation},
  langid = {english},
  file = {/Users/maxsch/Zotero/storage/R9JBTMAU/installation.html}
}

@inproceedings{kleppmannLocalFirstSoftwareYou2019,
  title = {Local-{{First Software}}: {{You Own Your Data}}, in {{Spite}} of the {{Cloud}}},
  booktitle = {Proceedings of the 2019 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Kleppmann, Martin and Wiggins, Adam and {van Hardenberg}, Peter and McGranaghan, Mark},
  year = {2019},
  series = {Onward! 2019},
  pages = {154--178},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3359591.3359737},
  abstract = {Cloud apps like Google Docs and Trello are popular because they enable real-time collaboration with colleagues, and they make it easy for us to access our work from all of our devices. However, by centralizing data storage on servers, cloud apps also take away ownership and agency from users. If a service shuts down, the software stops functioning, and data created with that software is lost. In this article we propose local-first software, a set of principles for software that enables both collaboration and ownership for users. Local-first ideals include the ability to work offline and collaborate across multiple devices, while also improving the security, privacy, long-term preservation, and user control of data. We survey existing approaches to data storage and sharing, ranging from email attachments to web apps to Firebase-backed mobile apps, and we examine the trade-offs of each. We look at Conflict-free Replicated Data Types (CRDTs): data structures that are multi-user from the ground up while also being fundamentally local and private. CRDTs have the potential to be a foundational technology for realizing local-first software. We share some of our findings from developing local-first software prototypes at the Ink \&amp; Switch research lab over the course of several years. These experiments test the viability of CRDTs in practice, and explore the user interface challenges for this new data model. Lastly, we suggest some next steps for moving towards local-first software: for researchers, for app developers, and a startup opportunity for entrepreneurs.},
  isbn = {978-1-4503-6995-4},
  keywords = {collaboration software,CRDTs,data ownership,mobile computing,peer-to-peer communication}
}

@misc{MotivationPnpm,
  title = {Motivation | Pnpm},
  urldate = {2023-04-28},
  abstract = {Saving disk space},
  howpublished = {https://pnpm.io/motivation},
  langid = {english},
  file = {/Users/maxsch/Zotero/storage/7WAV8U6G/motivation.html}
}

@book{nicolaescuYjsFrameworkRealTime2015,
  title = {Yjs: {{A Framework}} for {{Near Real-Time P2P Shared Editing}} on {{Arbitrary Data Types}}},
  author = {Nicolaescu, Petru and Jahns, Kevin and Derntl, Michael and Klamma, Ralf},
  editor = {Cimiano, Philipp and Frasincar, Flavius and Houben, Geert-Jan and Schwabe, Daniel},
  year = {2015},
  journal = {Engineering the Web in the Big Data Era},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  abstract = {Near real-time shared editing of documents in the Web browser has become popular for many applications like text writing, drawing, sketching and others. These applications require protocols for exchanging messages among user agents and for resolving editing conflicts. The available frameworks mostly rely on operational transformation approaches and often expose drawbacks like failing to scale, restriction to linear data structures and client-server architectures. In this paper we present Yjs, a lightweight open-source JavaScript framework that can be used for collaborative editing of arbitrary data types in peer-to-peer settings. The framework is based on a new operational transformation-like approach and supports communication protocols like XMPP and WebRTC. From an engineering perspective Yjs is easy to integrate into Web applications. Evaluations show that it has a favorable runtime complexity.},
  isbn = {978-3-319-19890-3}
}

@misc{Npm,
  title = {Npm},
  urldate = {2023-04-28},
  howpublished = {https://www.npmjs.com/},
  langid = {english},
  file = {/Users/maxsch/Zotero/storage/P6H9QMP8/www.npmjs.com.html}
}

@article{OperationalTransformation2022,
  title = {Operational Transformation},
  year = {2022},
  month = apr,
  journal = {Wikipedia},
  urldate = {2023-07-21},
  abstract = {Operational transformation (OT) is a technology for supporting a range of collaboration functionalities in advanced collaborative software systems. OT was originally invented for consistency maintenance and concurrency control in collaborative editing of plain text documents. Its capabilities have been extended and its applications expanded to include group undo, locking, conflict resolution, operation notification and compression, group-awareness, HTML/XML and tree-structured document editing, collaborative office productivity tools, application-sharing, and collaborative computer-aided media design tools. In 2009 OT was adopted as a core technique behind the collaboration features in Apache Wave and Google Docs.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1084900873}
}

@misc{QuickStartReact,
  title = {Quick {{Start}} \textendash{} {{React}}},
  urldate = {2023-04-28},
  abstract = {The library for web and native user interfaces},
  howpublished = {https://react.dev/learn},
  langid = {english},
  file = {/Users/maxsch/Zotero/storage/YWQPLY86/learn.html}
}

@techreport{shapiroComprehensiveStudyConvergent2011,
  type = {Research {{Report}}},
  title = {A Comprehensive Study of {{Convergent}} and {{Commutative Replicated Data Types}}},
  author = {Shapiro, Marc and Pregui{\c c}a, Nuno and Baquero, Carlos and Zawirski, Marek},
  year = {2011},
  month = jan,
  number = {RR-7506},
  pages = {50},
  institution = {{Inria \textendash{} Centre Paris-Rocquencourt ; INRIA}},
  keywords = {commutative operations,Data replication,distributed algorithms,distributed systems,eventual consistency,optimistic replication,replicated data types}
}

@misc{SignaturesFoundationsModern,
  title = {Signatures: {{The}} Foundations of Modern End-to-End Encryption},
  urldate = {2023-07-24},
  howpublished = {https://kerkour.com/signatures-modern-end-to-end-encryption}
}

@misc{smithShareDBRealtimeDocument2014,
  title = {{{ShareDB}}: {{Real-time}} Document Collaboration with Operational Transformation},
  author = {Smith, Nate and Gentle, Joseph},
  year = {2014},
  howpublished = {https://github.com/share/sharedb}
}

@inproceedings{sunOperationalTransformationRealtime1998,
  title = {Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements},
  shorttitle = {Operational Transformation in Real-Time Group Editors},
  booktitle = {Proceedings of the 1998 {{ACM}} Conference on {{Computer}} Supported Cooperative Work},
  author = {Sun, Chengzheng and Ellis, Clarence},
  year = {1998},
  month = nov,
  pages = {59--68},
  publisher = {{ACM}},
  address = {{Seattle Washington USA}},
  doi = {10.1145/289444.289469},
  urldate = {2023-04-25},
  isbn = {978-1-58113-009-6},
  langid = {english}
}

@misc{Tldraw2023,
  title = {Tldraw},
  year = {2023},
  month = apr,
  urldate = {2023-04-25},
  abstract = {A tiny little drawing app.},
  copyright = {MIT},
  howpublished = {https://github.com/tldraw/tldraw},
  keywords = {code,drawing,fun,sketch,svg,whiteboard}
}

@article{TopologieMesh2023,
  title = {{Topologie mesh}},
  year = {2023},
  month = apr,
  journal = {Wikip\'edia},
  urldate = {2023-07-24},
  abstract = {Le r\'eseau maill\'e (ou maillage en r\'eseau) est une topologie de r\'eseau (filaire et sans fil) o\`u tous les h\^otes sont connect\'es pair \`a pair sans hi\'erarchie centrale, formant ainsi une structure en forme de filet. Par cons\'equent, chaque n\oe ud doit recevoir, envoyer et relayer les donn\'ees. Ceci \'evite d'avoir des points n\'evralgiques qui, s'ils tombent en panne, isolent une partie du r\'eseau. Si un h\^ote est hors service, les donn\'ees empruntent une route alternative. Un r\'eseau en maille peut relayer les donn\'ees par \guillemotleft{} inondation \guillemotright{} (flood) ou  en utilisant des routes (itin\'eraires) pr\'ed\'efinis ; dans le second cas, le r\'eseau doit pr\'evoir des connexions sans interruption ou pr\'evoir des d\'eviations (routes alternatives). Issue de la recherche militaire et utilis\'ee notamment par les arm\'ees am\'ericaine et fran\c{c}aise, cette architecture reproduit le mod\`ele de l'Internet tout en l'optimisant pour le sans-fil. Technologie de rupture par rapport aux solutions centralis\'ees classiques sans-fil avec station de base, la solution en mailles autorise un d\'eploiement rapide et simplifi\'e, supporte une couverture \'evolutive, assure une grande tol\'erance aux pannes et aux interf\'erences et permet une importante r\'eduction des co\^uts d'installation et d'exploitation d'un r\'eseau.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {french},
  annotation = {Page Version ID: 203042517},
  file = {/Users/maxsch/Zotero/storage/3BM9L62G/Topologie_mesh.html}
}

@article{TopologieReseau2022,
  title = {{Topologie de r\'eseau}},
  year = {2022},
  month = nov,
  journal = {Wikip\'edia},
  urldate = {2023-07-24},
  abstract = {Une topologie de r\'eseau informatique correspond \`a l'architecture (physique, logicielle ou logique) de celui-ci, d\'efinissant les liaisons entre les \'equipements du r\'eseau et une hi\'erarchie \'eventuelle entre eux. Elle peut d\'efinir la fa\c{c}on dont les \'equipements sont interconnect\'es et la repr\'esentation spatiale du r\'eseau (topologie physique). Elle peut aussi d\'efinir la fa\c{c}on dont les donn\'ees transitent dans les lignes de communication (topologies logiques).},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {french},
  annotation = {Page Version ID: 198751841},
  file = {/Users/maxsch/Zotero/storage/3AHZBSHP/Topologie_de_réseau.html}
}

@misc{Turborepo,
  title = {Turborepo},
  journal = {Turbo},
  urldate = {2023-04-28},
  abstract = {Turborepo is a high-performance build system for JavaScript and TypeScript codebases.},
  howpublished = {https://turbo.build/repo},
  langid = {english},
  file = {/Users/maxsch/Zotero/storage/8PTLGXQ2/repo.html}
}

@misc{Zustand2023,
  title = {Zustand},
  year = {2023},
  month = apr,
  urldate = {2023-04-28},
  abstract = {🐻 Bear necessities for state management in React},
  copyright = {MIT},
  howpublished = {Poimandres}
}
